{"ast":null,"code":"import Delta from 'quill-delta';\nimport Quill from '../core/quill.js';\nimport Module from '../core/module.js';\nimport { TableCell, TableRow, TableBody, TableContainer, tableId } from '../formats/table.js';\nclass Table extends Module {\n  static register() {\n    Quill.register(TableCell);\n    Quill.register(TableRow);\n    Quill.register(TableBody);\n    Quill.register(TableContainer);\n  }\n  constructor() {\n    super(...arguments);\n    this.listenBalanceCells();\n  }\n  balanceTables() {\n    this.quill.scroll.descendants(TableContainer).forEach(table => {\n      table.balanceCells();\n    });\n  }\n  deleteColumn() {\n    const [table,, cell] = this.getTable();\n    if (cell == null) return;\n    // @ts-expect-error\n    table.deleteColumn(cell.cellOffset());\n    this.quill.update(Quill.sources.USER);\n  }\n  deleteRow() {\n    const [, row] = this.getTable();\n    if (row == null) return;\n    row.remove();\n    this.quill.update(Quill.sources.USER);\n  }\n  deleteTable() {\n    const [table] = this.getTable();\n    if (table == null) return;\n    // @ts-expect-error\n    const offset = table.offset();\n    // @ts-expect-error\n    table.remove();\n    this.quill.update(Quill.sources.USER);\n    this.quill.setSelection(offset, Quill.sources.SILENT);\n  }\n  getTable() {\n    let range = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.quill.getSelection();\n    if (range == null) return [null, null, null, -1];\n    const [cell, offset] = this.quill.getLine(range.index);\n    if (cell == null || cell.statics.blotName !== TableCell.blotName) {\n      return [null, null, null, -1];\n    }\n    const row = cell.parent;\n    const table = row.parent.parent;\n    // @ts-expect-error\n    return [table, row, cell, offset];\n  }\n  insertColumn(offset) {\n    const range = this.quill.getSelection();\n    if (!range) return;\n    const [table, row, cell] = this.getTable(range);\n    if (cell == null) return;\n    const column = cell.cellOffset();\n    table.insertColumn(column + offset);\n    this.quill.update(Quill.sources.USER);\n    let shift = row.rowOffset();\n    if (offset === 0) {\n      shift += 1;\n    }\n    this.quill.setSelection(range.index + shift, range.length, Quill.sources.SILENT);\n  }\n  insertColumnLeft() {\n    this.insertColumn(0);\n  }\n  insertColumnRight() {\n    this.insertColumn(1);\n  }\n  insertRow(offset) {\n    const range = this.quill.getSelection();\n    if (!range) return;\n    const [table, row, cell] = this.getTable(range);\n    if (cell == null) return;\n    const index = row.rowOffset();\n    table.insertRow(index + offset);\n    this.quill.update(Quill.sources.USER);\n    if (offset > 0) {\n      this.quill.setSelection(range, Quill.sources.SILENT);\n    } else {\n      this.quill.setSelection(range.index + row.children.length, range.length, Quill.sources.SILENT);\n    }\n  }\n  insertRowAbove() {\n    this.insertRow(0);\n  }\n  insertRowBelow() {\n    this.insertRow(1);\n  }\n  insertTable(rows, columns) {\n    const range = this.quill.getSelection();\n    if (range == null) return;\n    const delta = new Array(rows).fill(0).reduce(memo => {\n      const text = new Array(columns).fill('\\n').join('');\n      return memo.insert(text, {\n        table: tableId()\n      });\n    }, new Delta().retain(range.index));\n    this.quill.updateContents(delta, Quill.sources.USER);\n    this.quill.setSelection(range.index, Quill.sources.SILENT);\n    this.balanceTables();\n  }\n  listenBalanceCells() {\n    this.quill.on(Quill.events.SCROLL_OPTIMIZE, mutations => {\n      mutations.some(mutation => {\n        if (['TD', 'TR', 'TBODY', 'TABLE'].includes(mutation.target.tagName)) {\n          this.quill.once(Quill.events.TEXT_CHANGE, (delta, old, source) => {\n            if (source !== Quill.sources.USER) return;\n            this.balanceTables();\n          });\n          return true;\n        }\n        return false;\n      });\n    });\n  }\n}\nexport default Table;","map":{"version":3,"names":["Delta","Quill","Module","TableCell","TableRow","TableBody","TableContainer","tableId","Table","register","constructor","arguments","listenBalanceCells","balanceTables","quill","scroll","descendants","forEach","table","balanceCells","deleteColumn","cell","getTable","cellOffset","update","sources","USER","deleteRow","row","remove","deleteTable","offset","setSelection","SILENT","range","length","undefined","getSelection","getLine","index","statics","blotName","parent","insertColumn","column","shift","rowOffset","insertColumnLeft","insertColumnRight","insertRow","children","insertRowAbove","insertRowBelow","insertTable","rows","columns","delta","Array","fill","reduce","memo","text","join","insert","retain","updateContents","on","events","SCROLL_OPTIMIZE","mutations","some","mutation","includes","target","tagName","once","TEXT_CHANGE","old","source"],"sources":["C:/Users/faigy/OneDrive/Documents/travel journal project/travel-journal client/myproject/node_modules/quill/modules/table.js"],"sourcesContent":["import Delta from 'quill-delta';\nimport Quill from '../core/quill.js';\nimport Module from '../core/module.js';\nimport { TableCell, TableRow, TableBody, TableContainer, tableId } from '../formats/table.js';\nclass Table extends Module {\n  static register() {\n    Quill.register(TableCell);\n    Quill.register(TableRow);\n    Quill.register(TableBody);\n    Quill.register(TableContainer);\n  }\n  constructor() {\n    super(...arguments);\n    this.listenBalanceCells();\n  }\n  balanceTables() {\n    this.quill.scroll.descendants(TableContainer).forEach(table => {\n      table.balanceCells();\n    });\n  }\n  deleteColumn() {\n    const [table,, cell] = this.getTable();\n    if (cell == null) return;\n    // @ts-expect-error\n    table.deleteColumn(cell.cellOffset());\n    this.quill.update(Quill.sources.USER);\n  }\n  deleteRow() {\n    const [, row] = this.getTable();\n    if (row == null) return;\n    row.remove();\n    this.quill.update(Quill.sources.USER);\n  }\n  deleteTable() {\n    const [table] = this.getTable();\n    if (table == null) return;\n    // @ts-expect-error\n    const offset = table.offset();\n    // @ts-expect-error\n    table.remove();\n    this.quill.update(Quill.sources.USER);\n    this.quill.setSelection(offset, Quill.sources.SILENT);\n  }\n  getTable() {\n    let range = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.quill.getSelection();\n    if (range == null) return [null, null, null, -1];\n    const [cell, offset] = this.quill.getLine(range.index);\n    if (cell == null || cell.statics.blotName !== TableCell.blotName) {\n      return [null, null, null, -1];\n    }\n    const row = cell.parent;\n    const table = row.parent.parent;\n    // @ts-expect-error\n    return [table, row, cell, offset];\n  }\n  insertColumn(offset) {\n    const range = this.quill.getSelection();\n    if (!range) return;\n    const [table, row, cell] = this.getTable(range);\n    if (cell == null) return;\n    const column = cell.cellOffset();\n    table.insertColumn(column + offset);\n    this.quill.update(Quill.sources.USER);\n    let shift = row.rowOffset();\n    if (offset === 0) {\n      shift += 1;\n    }\n    this.quill.setSelection(range.index + shift, range.length, Quill.sources.SILENT);\n  }\n  insertColumnLeft() {\n    this.insertColumn(0);\n  }\n  insertColumnRight() {\n    this.insertColumn(1);\n  }\n  insertRow(offset) {\n    const range = this.quill.getSelection();\n    if (!range) return;\n    const [table, row, cell] = this.getTable(range);\n    if (cell == null) return;\n    const index = row.rowOffset();\n    table.insertRow(index + offset);\n    this.quill.update(Quill.sources.USER);\n    if (offset > 0) {\n      this.quill.setSelection(range, Quill.sources.SILENT);\n    } else {\n      this.quill.setSelection(range.index + row.children.length, range.length, Quill.sources.SILENT);\n    }\n  }\n  insertRowAbove() {\n    this.insertRow(0);\n  }\n  insertRowBelow() {\n    this.insertRow(1);\n  }\n  insertTable(rows, columns) {\n    const range = this.quill.getSelection();\n    if (range == null) return;\n    const delta = new Array(rows).fill(0).reduce(memo => {\n      const text = new Array(columns).fill('\\n').join('');\n      return memo.insert(text, {\n        table: tableId()\n      });\n    }, new Delta().retain(range.index));\n    this.quill.updateContents(delta, Quill.sources.USER);\n    this.quill.setSelection(range.index, Quill.sources.SILENT);\n    this.balanceTables();\n  }\n  listenBalanceCells() {\n    this.quill.on(Quill.events.SCROLL_OPTIMIZE, mutations => {\n      mutations.some(mutation => {\n        if (['TD', 'TR', 'TBODY', 'TABLE'].includes(mutation.target.tagName)) {\n          this.quill.once(Quill.events.TEXT_CHANGE, (delta, old, source) => {\n            if (source !== Quill.sources.USER) return;\n            this.balanceTables();\n          });\n          return true;\n        }\n        return false;\n      });\n    });\n  }\n}\nexport default Table;\n//# sourceMappingURL=table.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}